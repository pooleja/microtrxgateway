<!DOCTYPE html>
<html>
  <head>
    <title>microTrx</title>
    <link type='css' rel='stylesheet' href='/stylesheets/bootstrap.min.css' />
  </head>
  <body>
   <div class="container">

    <% include nav %>

<h1>
API Overview
</h1>

<p>
The MicroTrx Simple Payments (MSP) is the easiest way to use the payment gateway to accept bitcoins in your software or on your website.  It uses a combination of different HTTP API calls to set up a payment transaction, wait for payment confirmation, and allow the payment to be sent directly to your wallet using BIP 38 generated addresses.
</p>

<p>
To use MSP, the following steps are required:
<ul>
<li>Register your BIP 38 public key</li>
<li>Embed MicroTrx SP client code on your website</li>
<li>Allow customers to make purchases</li>
</ul>
</p>

<p>
To see an example of the payment gateway in action, click Here.
</p>

<h1>
Usage Instructions
</h1>

<h3>
Register your Public Key
</h3>

<p>
Follow the instructions here to register your BIP 38 public key.  Input the extended public key you would like to use as a seed for all addresses used in transactions.  All payments transacted through the service can be redeemed by using a HD compatible wallet loaded with the corresponding HD private key.
</p>

<h3>
Embed MicroTrx SP Client Code
</h3>

<p>
Once you have registered your public key with MicroTrx, the next step is to embed the client code into your website.  There are a few different ways to accomplish this, but we will investigate the simplest method, which is the Javascript Website method.  This method allows you to create a paywall over HTML DIV elements.  When your website is loaded in the user’s browser, the DIV you set up will be hidden and only viewable via payment to your account.
</p>
<p>
When the page is loaded in the clients browser, it will first check to see if the payment has been made to the server.  If the payment has been made, it will respond with the full text data.  If the payment has not been made, only partial content will be delivered to the customer and a paywall image will be loaded requesting the user to send the payment in order to view the full content.
</p>

<p>
See here for a sample application that uses the MSP system as a paywall to content.
</p>

<h3>
Allow customers to make purchases
</h3>

<p>
Once your site is up and running customers will be able to send payments to unlock your content.  Every time your page loads, a new Payment Address will be used.  This will protect your privacy and also allow easier tracking of payments.
</p>

<p>
If you would like to ever see an overview of the transactions that MicroTrx has processed for you, see here and enter your key.
</p>

<h1>
Technical Details
</h1>

<p>
If you would like to build your own integration with the MSP system, you can absolutely do this.  It uses simple HTTP requests to request a payment address and to wait for payment notification.  The following example will demo the calls required.
</p>

<h3>
Errors
</h3>

<p>
Any time you make an API request to the SP system, the result will include a “success” value to let you now whether the call encountered an error.  Errors can range from invalid input params to server side errors.  If an error is encountered, you will see a “false” success value returned with an error message.
</p>

<p>
For example:
</p>

<pre>
<code>
{
   “success” : “false”,
   “error” : “Invalid publicAddress input parameter"
}
</code>
</pre>

<h3>
Register Your Public Key
</h3>

<p>
The first step is to register your public key here.  In addition you can register the address programmatically by making the following API call:
</p>

<p>
POST https://www.microtrx.com/api/v1/simple/keys
</p>

<p>
POST Data:
</p>

<pre><code>
{
   “publicKey": “xpub661MyMwAqRbcFBZoQf8P4UgHnVZQYLAdFSc2ETgubGurYoDx6S77fgLtxCWdUGSMfkDaeChqWiG5FPkgFZryVCAWFYippE8LWU53yztqWxf”
}
</code></pre>

<p>
Response Data:
</p>

<pre><code>
{
   "success": "true”,
   "result": {
      “publicKey": "xpub661MyMwAqRbcFBZoQf8P4UgHnVZQYLAdFSc2ETgubGurYoDx6S77fgLtxCWdUGSMfkDaeChqWiG5FPkgFZryVCAWFYippE8LWU53yztqWxf”
   }
}
</code></pre>

<h3>
Request New Payment Address
</h3>

<p>
Once you have registered your Public Key, the next step is to request an address for a customer to send a payment to.  The scheme used to generate addresses is based on BIP32.  Receiving addresses will be generated using the derivation path 'm/0/X' where X is the number of the request.  The first path will be 'm/0/0', the second will be 'm/0/1', and so on.
</p>

<p>
GET https://www.microtrx.com/api/v1/simple/payments?publicKey=xpub661MyMwAqRbcFBZoQf8P4UgHnVZQYLAdFSc2ETgubGurYoDx6S77fgLtxCWdUGSMfkDaeChqWiG5FPkgFZryVCAWFYippE8LWU53yztqWxf&amountRequested=0.001
</p>

<p>
Request Query Parameters
publicKey: The clients registered public key
amountRequested: The minimum amount you are requiring to be sent to the Payment Address before you accept the payment as being complete.  This value is specified in BTC (e.g.”0.0001")
</p>

<p>
Response Data:
</p>

<pre><code>
{
   “success” : “true”,
   “result” :
   {
     “paymentAddress” : “1DpoofAj3PKmznST4WwpoA2Shr36bMQNPC”,
     “paymentUrl” : “bitcoin:1DpoofAj3PKmznST4WwpoA2Shr36bMQNPC?amount=0.001&gateway=microtrx.com"
   }
}
</code></pre>

<p>
Your application should then show the “paymentAddress” to the client with a payment amount requested in BTC.  The paymentUrl can also be used to allow the user to click a link to open their wallet software, or even be used to generate a QR code.
</p>

<h3>
Verify Payment
</h3>

<p>
Once your application shows the Payment Address to the customer, it must detect when the payment is made so it can unlock the goods or services that the customer is paying for.  To do this, the following API call can be made:
</p>

<p>
GET https://www.microtrx.com/api/v1/simple/payments/:paymentAddress
</p>

<p>
Where “:paymentAddress” is the Payment Address the customer is sending money to.
</p>

<p>
Additionally there is one query parameter that can be specified for convenience:
timeout - The amount of time in seconds you want the server to wait before returning if no payment has been sent.  The default value is “0” for to make it return immediately.  The minimum value is “0” and maximum value is “60”.
GET https://www.microtrx.com/api/v1/simple/payments/:paymentAddress?timeout=30
</p>

<p>
Response Data:
</p>

<p>
Response if successfully received payment in the 30 seconds:
</p>

<pre><code>
{
   “success” : “true”,
   “result” :
   {
     “paymentAddress” : “1DpoofAj3PKmznST4WwpoA2Shr36bMQNPC”,
     “amountRecieved” : “0.001”,
     “timeout” : “false”,
     “paid” : true
   }
}
</code></pre>

<p>
Response if no payment was received (or only partial payment was received) in the 30 seconds:
</p>

<pre><code>
{
   “success” : “true”,
   “result” :
   {
     “paymentAddress” : “1DpoofAj3PKmznST4WwpoA2Shr36bMQNPC”,
     “amountRecieved” : “0”,
     “timeout” : “true”,
     “paid” : false
   }
}
</code></pre>

<h3>
Payment History
</h3>

<p>
To see a history of all payments made to your Public Address, you can make the following API call:
</p>

<p>
GET https://www.microtrx.com/api/v1/simple/keys/:key/history
</p>

<p>
Response Data:
</p>

<pre><code>
{
     "success": "true”,
     "result": [
           {
               "paymentAddress": "mhb7odZDp5MVcTyZTMir3xoxrv2kGqafFw”,
               "amountRequested": 0.0002,
               "amountReceived": 0.0001,
               “transactionsHashes” : [
                ]
           }
     ]
}
</code></pre>

<p>
Additionally, you can specify the following query parameters to allow paging:
“page” - start page of the records you would like to retrieve.  This value defaults to 1.
“total” - total number of records in each page.
</p>

<p>
For example, the following request could be used to view the 3rd Page of results if the page size is 50:
</p>

<p>
GET https://www.microtrx.com/api/v1/simple/keys/:key/history?page=3&total=50
</p>


   <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="javascripts/jquery-2.1.1.min.js"></script>

    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="javascripts/bootstrap.min.js"></script>

  </body>
</html>
